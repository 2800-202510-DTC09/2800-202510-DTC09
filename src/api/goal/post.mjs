import {status} from 'http-status';
import {Error} from 'mongoose';
import {Goal, normalize} from '../../model/goal.mjs';
import {User} from '../../model/user.mjs';
import {goal} from './index.mjs';

/**
 * Create openAPI doc.
 * Generated by Claude Sonnet 4.0
 *
 * @author https://claude.ai/
 */

/**
 * @openapi
 * /goal:
 *   post:
 *     description: Create a new goal for the authenticated user
 *     tags:
 *       - Goal
 *     requestBody:
 *       description: Goal information
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *                 example: Bike to Work
 *               description:
 *                 type: string
 *                 example: Bike instead of driving to work for 5 days
 *               icon:
 *                 type: string
 *                 example: ðŸš´
 *               emission:
 *                 type: number
 *                 example: 500
 *               emissionDiff:
 *                 type: number
 *                 example: 50
 *               emissionDiffStart:
 *                 type: string
 *                 format: date-time
 *                 example: 2025-01-01T00:00:00.000Z
 *               emissionDiffEnd:
 *                 type: string
 *                 format: date-time
 *                 example: 2025-01-08T00:00:00.000Z
 *               scorePoints:
 *                 type: number
 *                 example: 25
 *               durationDays:
 *                 type: number
 *                 example: 5
 *               badge:
 *                 type: string
 *                 example: 681a396e1674a09cc7fa43d9
 *     responses:
 *       200:
 *         description: Goal is created successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 id:
 *                   type: string
 *                   example: 507f1f77bcf86cd799439011
 *                 name:
 *                   type: string
 *                   example: Bike to Work
 *                 description:
 *                   type: string
 *                   example: Bike instead of driving to work for 5 days
 *                 scorePoints:
 *                   type: number
 *                   example: 25
 *                 completed:
 *                   type: boolean
 *                   example: false
 *       400:
 *         description: Bad request - validation errors or duplicate goal
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: You already have this goal active
 *       401:
 *         description: Unauthorized - user not logged in
 *       500:
 *         description: Server internal error
 */
goal.post('/', async (req, res) => {
    try {
        const userId = req.session?.user?.id;
        if (!userId) return res.sendStatus(status.UNAUTHORIZED);

        const existingGoal = await Goal.findOne({
            user: userId,
            name: req.body.name,
            $or: [
                {deletedAt: {$exists: false}},
                {deletedAt: null},
                {deletedAt: {$gt: Date.now()}},
            ],
        });

        if (existingGoal) {
            return res.status(status.BAD_REQUEST).json({
                error: existingGoal.completed
                    ? 'You have already completed this goal'
                    : 'You already have this goal active',
            });
        }

        const goalData = Object.fromEntries(
            [
                'name',
                'description',
                'icon',
                'emission',
                'emissionDiff',
                'emissionDiffStart',
                'emissionDiffEnd',
                'scorePoints',
                'durationDays',
                'badge',
            ].map((v) => [v, req.body[v]]),
        );
        goalData.user = userId;

        const newGoal = await new Goal(goalData).save();

        await User.findByIdAndUpdate(userId, {
            $push: {goals: newGoal._id},
        });

        return res.status(status.OK).json(normalize(newGoal).pop());
    } catch (e) {
        if (e.name === Error.ValidationError.name) {
            return res.status(status.BAD_REQUEST).json(e.errors);
        }
        console.error(e);
        return res.sendStatus(status.INTERNAL_SERVER_ERROR);
    }
});
